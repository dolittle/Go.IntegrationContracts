// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: M3/Configuration/Configuration.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PredicateType int32

const (
	PredicateType_All PredicateType = 0
	PredicateType_Any PredicateType = 1
)

// Enum value maps for PredicateType.
var (
	PredicateType_name = map[int32]string{
		0: "All",
		1: "Any",
	}
	PredicateType_value = map[string]int32{
		"All": 0,
		"Any": 1,
	}
)

func (x PredicateType) Enum() *PredicateType {
	p := new(PredicateType)
	*p = x
	return p
}

func (x PredicateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredicateType) Descriptor() protoreflect.EnumDescriptor {
	return file_M3_Configuration_Configuration_proto_enumTypes[0].Descriptor()
}

func (PredicateType) Type() protoreflect.EnumType {
	return &file_M3_Configuration_Configuration_proto_enumTypes[0]
}

func (x PredicateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredicateType.Descriptor instead.
func (PredicateType) EnumDescriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{0}
}

type DataType int32

const (
	DataType_String  DataType = 0
	DataType_Integer DataType = 1
	DataType_Double  DataType = 2
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "String",
		1: "Integer",
		2: "Double",
	}
	DataType_value = map[string]int32{
		"String":  0,
		"Integer": 1,
		"Double":  2,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_M3_Configuration_Configuration_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_M3_Configuration_Configuration_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{1}
}

type Comparator int32

const (
	Comparator_Eq  Comparator = 0
	Comparator_Lt  Comparator = 1
	Comparator_Lte Comparator = 2
	Comparator_Gt  Comparator = 3
	Comparator_Gte Comparator = 4
	Comparator_Ne  Comparator = 5
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "Eq",
		1: "Lt",
		2: "Lte",
		3: "Gt",
		4: "Gte",
		5: "Ne",
	}
	Comparator_value = map[string]int32{
		"Eq":  0,
		"Lt":  1,
		"Lte": 2,
		"Gt":  3,
		"Gte": 4,
		"Ne":  5,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_M3_Configuration_Configuration_proto_enumTypes[2].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_M3_Configuration_Configuration_proto_enumTypes[2]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{2}
}

type TableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName  string          `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	TableName       string          `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IncludedColumns []string        `protobuf:"bytes,3,rep,name=included_columns,json=includedColumns,proto3" json:"included_columns,omitempty"`
	PrimaryKey      []string        `protobuf:"bytes,4,rep,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	Mappings        []*TableMapping `protobuf:"bytes,5,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *TableConfig) Reset() {
	*x = TableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConfig) ProtoMessage() {}

func (x *TableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConfig.ProtoReflect.Descriptor instead.
func (*TableConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{0}
}

func (x *TableConfig) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *TableConfig) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableConfig) GetIncludedColumns() []string {
	if x != nil {
		return x.IncludedColumns
	}
	return nil
}

func (x *TableConfig) GetPrimaryKey() []string {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *TableConfig) GetMappings() []*TableMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// Configures how (and if) a table row should be mapped to an output message
type TableMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message / contract name
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Rules to determine if this mapping should be used.
	// Null Predicate == true
	WebhookPredicate *WebhookPredicate `protobuf:"bytes,2,opt,name=webhook_predicate,json=webhookPredicate,proto3" json:"webhook_predicate,omitempty"`
	// Additional filtering, only usable by the exporter.
	JqPredicate string `protobuf:"bytes,3,opt,name=jq_predicate,json=jqPredicate,proto3" json:"jq_predicate,omitempty"`
	// Column mappings
	Mappings []*ColumnMap `protobuf:"bytes,4,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *TableMapping) Reset() {
	*x = TableMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMapping) ProtoMessage() {}

func (x *TableMapping) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMapping.ProtoReflect.Descriptor instead.
func (*TableMapping) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{1}
}

func (x *TableMapping) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *TableMapping) GetWebhookPredicate() *WebhookPredicate {
	if x != nil {
		return x.WebhookPredicate
	}
	return nil
}

func (x *TableMapping) GetJqPredicate() string {
	if x != nil {
		return x.JqPredicate
	}
	return ""
}

func (x *TableMapping) GetMappings() []*ColumnMap {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// Defines a predicate that can be used to determine if a mapping should be used
// It is designed to be able to be used for webhook filtering on the M3 side.
type WebhookPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Empty clauses == true
	Clauses       []*Clause     `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
	PredicateType PredicateType `protobuf:"varint,2,opt,name=predicate_type,json=predicateType,proto3,enum=dolittle.integrations.m3.config.PredicateType" json:"predicate_type,omitempty"`
}

func (x *WebhookPredicate) Reset() {
	*x = WebhookPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookPredicate) ProtoMessage() {}

func (x *WebhookPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookPredicate.ProtoReflect.Descriptor instead.
func (*WebhookPredicate) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{2}
}

func (x *WebhookPredicate) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

func (x *WebhookPredicate) GetPredicateType() PredicateType {
	if x != nil {
		return x.PredicateType
	}
	return PredicateType_All
}

// Remaps from internal M3 column name to a descriptive property name
type ColumnMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column    string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	OutputKey string   `protobuf:"bytes,2,opt,name=output_key,json=outputKey,proto3" json:"output_key,omitempty"`
	DataType  DataType `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=dolittle.integrations.m3.config.DataType" json:"data_type,omitempty"`
}

func (x *ColumnMap) Reset() {
	*x = ColumnMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMap) ProtoMessage() {}

func (x *ColumnMap) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMap.ProtoReflect.Descriptor instead.
func (*ColumnMap) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{3}
}

func (x *ColumnMap) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ColumnMap) GetOutputKey() string {
	if x != nil {
		return x.OutputKey
	}
	return ""
}

func (x *ColumnMap) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_String
}

type Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column     string     `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Comparator Comparator `protobuf:"varint,2,opt,name=comparator,proto3,enum=dolittle.integrations.m3.config.Comparator" json:"comparator,omitempty"`
	// Types that are assignable to Value:
	//	*Clause_StringValue
	//	*Clause_IntValue
	//	*Clause_DoubleValue
	Value isClause_Value `protobuf_oneof:"value"`
}

func (x *Clause) Reset() {
	*x = Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause) ProtoMessage() {}

func (x *Clause) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause.ProtoReflect.Descriptor instead.
func (*Clause) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{4}
}

func (x *Clause) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Clause) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_Eq
}

func (m *Clause) GetValue() isClause_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Clause) GetStringValue() string {
	if x, ok := x.GetValue().(*Clause_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Clause) GetIntValue() int64 {
	if x, ok := x.GetValue().(*Clause_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Clause) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Clause_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isClause_Value interface {
	isClause_Value()
}

type Clause_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Clause_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Clause_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*Clause_StringValue) isClause_Value() {}

func (*Clause_IntValue) isClause_Value() {}

func (*Clause_DoubleValue) isClause_Value() {}

type InforDocumentManagementExporterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName        string             `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	DocumentTypes         []string           `protobuf:"bytes,2,rep,name=document_types,json=documentTypes,proto3" json:"document_types,omitempty"`
	ErrorDebounceSeconds  int32              `protobuf:"varint,3,opt,name=error_debounce_seconds,json=errorDebounceSeconds,proto3" json:"error_debounce_seconds,omitempty"`
	ExportIntervalSeconds int32              `protobuf:"varint,4,opt,name=export_interval_seconds,json=exportIntervalSeconds,proto3" json:"export_interval_seconds,omitempty"`
	DocumentMaxageDays    int32              `protobuf:"varint,5,opt,name=document_maxage_days,json=documentMaxageDays,proto3" json:"document_maxage_days,omitempty"`
	BlobStorage           *BlobStorageConfig `protobuf:"bytes,6,opt,name=blob_storage,json=blobStorage,proto3" json:"blob_storage,omitempty"`
}

func (x *InforDocumentManagementExporterConfig) Reset() {
	*x = InforDocumentManagementExporterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InforDocumentManagementExporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InforDocumentManagementExporterConfig) ProtoMessage() {}

func (x *InforDocumentManagementExporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InforDocumentManagementExporterConfig.ProtoReflect.Descriptor instead.
func (*InforDocumentManagementExporterConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{5}
}

func (x *InforDocumentManagementExporterConfig) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *InforDocumentManagementExporterConfig) GetDocumentTypes() []string {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

func (x *InforDocumentManagementExporterConfig) GetErrorDebounceSeconds() int32 {
	if x != nil {
		return x.ErrorDebounceSeconds
	}
	return 0
}

func (x *InforDocumentManagementExporterConfig) GetExportIntervalSeconds() int32 {
	if x != nil {
		return x.ExportIntervalSeconds
	}
	return 0
}

func (x *InforDocumentManagementExporterConfig) GetDocumentMaxageDays() int32 {
	if x != nil {
		return x.DocumentMaxageDays
	}
	return 0
}

func (x *InforDocumentManagementExporterConfig) GetBlobStorage() *BlobStorageConfig {
	if x != nil {
		return x.BlobStorage
	}
	return nil
}

type InforDocumentManagementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName             string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	InforDocumentManagementUrl string `protobuf:"bytes,2,opt,name=infor_document_management_url,json=inforDocumentManagementUrl,proto3" json:"infor_document_management_url,omitempty"`
	RequestTimeoutSeconds      int32  `protobuf:"varint,3,opt,name=request_timeout_seconds,json=requestTimeoutSeconds,proto3" json:"request_timeout_seconds,omitempty"`
	// Types that are assignable to Authentication:
	//	*InforDocumentManagementConfiguration_IonAuthentication
	//	*InforDocumentManagementConfiguration_BasicAuthentication
	Authentication isInforDocumentManagementConfiguration_Authentication `protobuf_oneof:"authentication"`
}

func (x *InforDocumentManagementConfiguration) Reset() {
	*x = InforDocumentManagementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InforDocumentManagementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InforDocumentManagementConfiguration) ProtoMessage() {}

func (x *InforDocumentManagementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InforDocumentManagementConfiguration.ProtoReflect.Descriptor instead.
func (*InforDocumentManagementConfiguration) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{6}
}

func (x *InforDocumentManagementConfiguration) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *InforDocumentManagementConfiguration) GetInforDocumentManagementUrl() string {
	if x != nil {
		return x.InforDocumentManagementUrl
	}
	return ""
}

func (x *InforDocumentManagementConfiguration) GetRequestTimeoutSeconds() int32 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

func (m *InforDocumentManagementConfiguration) GetAuthentication() isInforDocumentManagementConfiguration_Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (x *InforDocumentManagementConfiguration) GetIonAuthentication() *OauthAuthentication {
	if x, ok := x.GetAuthentication().(*InforDocumentManagementConfiguration_IonAuthentication); ok {
		return x.IonAuthentication
	}
	return nil
}

func (x *InforDocumentManagementConfiguration) GetBasicAuthentication() *BasicAuthentication {
	if x, ok := x.GetAuthentication().(*InforDocumentManagementConfiguration_BasicAuthentication); ok {
		return x.BasicAuthentication
	}
	return nil
}

type isInforDocumentManagementConfiguration_Authentication interface {
	isInforDocumentManagementConfiguration_Authentication()
}

type InforDocumentManagementConfiguration_IonAuthentication struct {
	IonAuthentication *OauthAuthentication `protobuf:"bytes,10,opt,name=ion_authentication,json=ionAuthentication,proto3,oneof"`
}

type InforDocumentManagementConfiguration_BasicAuthentication struct {
	BasicAuthentication *BasicAuthentication `protobuf:"bytes,11,opt,name=basic_authentication,json=basicAuthentication,proto3,oneof"`
}

func (*InforDocumentManagementConfiguration_IonAuthentication) isInforDocumentManagementConfiguration_Authentication() {
}

func (*InforDocumentManagementConfiguration_BasicAuthentication) isInforDocumentManagementConfiguration_Authentication() {
}

type M3Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName        string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	GatewayUrl            string `protobuf:"bytes,2,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"`
	RequestTimeoutSeconds int32  `protobuf:"varint,3,opt,name=request_timeout_seconds,json=requestTimeoutSeconds,proto3" json:"request_timeout_seconds,omitempty"`
	// Types that are assignable to Authentication:
	//	*M3Configuration_OauthAuthentication
	//	*M3Configuration_BasicAuthentication
	Authentication isM3Configuration_Authentication `protobuf_oneof:"authentication"`
}

func (x *M3Configuration) Reset() {
	*x = M3Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M3Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M3Configuration) ProtoMessage() {}

func (x *M3Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M3Configuration.ProtoReflect.Descriptor instead.
func (*M3Configuration) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{7}
}

func (x *M3Configuration) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *M3Configuration) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *M3Configuration) GetRequestTimeoutSeconds() int32 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

func (m *M3Configuration) GetAuthentication() isM3Configuration_Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (x *M3Configuration) GetOauthAuthentication() *OauthAuthentication {
	if x, ok := x.GetAuthentication().(*M3Configuration_OauthAuthentication); ok {
		return x.OauthAuthentication
	}
	return nil
}

func (x *M3Configuration) GetBasicAuthentication() *BasicAuthentication {
	if x, ok := x.GetAuthentication().(*M3Configuration_BasicAuthentication); ok {
		return x.BasicAuthentication
	}
	return nil
}

type isM3Configuration_Authentication interface {
	isM3Configuration_Authentication()
}

type M3Configuration_OauthAuthentication struct {
	OauthAuthentication *OauthAuthentication `protobuf:"bytes,10,opt,name=oauth_authentication,json=oauthAuthentication,proto3,oneof"`
}

type M3Configuration_BasicAuthentication struct {
	BasicAuthentication *BasicAuthentication `protobuf:"bytes,11,opt,name=basic_authentication,json=basicAuthentication,proto3,oneof"`
}

func (*M3Configuration_OauthAuthentication) isM3Configuration_Authentication() {}

func (*M3Configuration_BasicAuthentication) isM3Configuration_Authentication() {}

type OauthAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username              string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password              string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ClientId              string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret          string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	OauthTokenUrl         string `protobuf:"bytes,5,opt,name=oauth_token_url,json=oauthTokenUrl,proto3" json:"oauth_token_url,omitempty"`
	AllowInsecureSsl      bool   `protobuf:"varint,6,opt,name=allow_insecure_ssl,json=allowInsecureSsl,proto3" json:"allow_insecure_ssl,omitempty"`
	RequestTimeoutSeconds int32  `protobuf:"varint,7,opt,name=request_timeout_seconds,json=requestTimeoutSeconds,proto3" json:"request_timeout_seconds,omitempty"`
}

func (x *OauthAuthentication) Reset() {
	*x = OauthAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthAuthentication) ProtoMessage() {}

func (x *OauthAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthAuthentication.ProtoReflect.Descriptor instead.
func (*OauthAuthentication) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{8}
}

func (x *OauthAuthentication) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OauthAuthentication) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OauthAuthentication) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OauthAuthentication) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OauthAuthentication) GetOauthTokenUrl() string {
	if x != nil {
		return x.OauthTokenUrl
	}
	return ""
}

func (x *OauthAuthentication) GetAllowInsecureSsl() bool {
	if x != nil {
		return x.AllowInsecureSsl
	}
	return false
}

func (x *OauthAuthentication) GetRequestTimeoutSeconds() int32 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

type BasicAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BasicAuthentication) Reset() {
	*x = BasicAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuthentication) ProtoMessage() {}

func (x *BasicAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuthentication.ProtoReflect.Descriptor instead.
func (*BasicAuthentication) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{9}
}

func (x *BasicAuthentication) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BasicAuthentication) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type BlobStorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Types that are assignable to Provider:
	//	*BlobStorageConfig_AzureProvider
	Provider isBlobStorageConfig_Provider `protobuf_oneof:"provider"`
}

func (x *BlobStorageConfig) Reset() {
	*x = BlobStorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStorageConfig) ProtoMessage() {}

func (x *BlobStorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStorageConfig.ProtoReflect.Descriptor instead.
func (*BlobStorageConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{10}
}

func (x *BlobStorageConfig) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (m *BlobStorageConfig) GetProvider() isBlobStorageConfig_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *BlobStorageConfig) GetAzureProvider() *AzureBlobStorageConfig {
	if x, ok := x.GetProvider().(*BlobStorageConfig_AzureProvider); ok {
		return x.AzureProvider
	}
	return nil
}

type isBlobStorageConfig_Provider interface {
	isBlobStorageConfig_Provider()
}

type BlobStorageConfig_AzureProvider struct {
	AzureProvider *AzureBlobStorageConfig `protobuf:"bytes,10,opt,name=azure_provider,json=azureProvider,proto3,oneof"`
}

func (*BlobStorageConfig_AzureProvider) isBlobStorageConfig_Provider() {}

type AzureBlobStorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionString string `protobuf:"bytes,1,opt,name=connection_string,json=connectionString,proto3" json:"connection_string,omitempty"`
}

func (x *AzureBlobStorageConfig) Reset() {
	*x = AzureBlobStorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureBlobStorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureBlobStorageConfig) ProtoMessage() {}

func (x *AzureBlobStorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureBlobStorageConfig.ProtoReflect.Descriptor instead.
func (*AzureBlobStorageConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{11}
}

func (x *AzureBlobStorageConfig) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

type KafkaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string  `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Topics         *Topics `protobuf:"bytes,2,opt,name=topics,proto3" json:"topics,omitempty"`
}

func (x *KafkaConfiguration) Reset() {
	*x = KafkaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfiguration) ProtoMessage() {}

func (x *KafkaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfiguration.ProtoReflect.Descriptor instead.
func (*KafkaConfiguration) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{12}
}

func (x *KafkaConfiguration) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *KafkaConfiguration) GetTopics() *Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

type Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputTopic  string `protobuf:"bytes,1,opt,name=output_topic,json=outputTopic,proto3" json:"output_topic,omitempty"`
	WebhookTopic string `protobuf:"bytes,2,opt,name=webhook_topic,json=webhookTopic,proto3" json:"webhook_topic,omitempty"`
	CommandTopic string `protobuf:"bytes,3,opt,name=command_topic,json=commandTopic,proto3" json:"command_topic,omitempty"`
	ReceiptTopic string `protobuf:"bytes,4,opt,name=receipt_topic,json=receiptTopic,proto3" json:"receipt_topic,omitempty"`
}

func (x *Topics) Reset() {
	*x = Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topics) ProtoMessage() {}

func (x *Topics) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topics.ProtoReflect.Descriptor instead.
func (*Topics) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{13}
}

func (x *Topics) GetOutputTopic() string {
	if x != nil {
		return x.OutputTopic
	}
	return ""
}

func (x *Topics) GetWebhookTopic() string {
	if x != nil {
		return x.WebhookTopic
	}
	return ""
}

func (x *Topics) GetCommandTopic() string {
	if x != nil {
		return x.CommandTopic
	}
	return ""
}

func (x *Topics) GetReceiptTopic() string {
	if x != nil {
		return x.ReceiptTopic
	}
	return ""
}

type MetadataPublisherConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName        string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	MetadataUrl           string `protobuf:"bytes,2,opt,name=metadata_url,json=metadataUrl,proto3" json:"metadata_url,omitempty"`
	Password              string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	RequestTimeoutSeconds int32  `protobuf:"varint,4,opt,name=request_timeout_seconds,json=requestTimeoutSeconds,proto3" json:"request_timeout_seconds,omitempty"`
}

func (x *MetadataPublisherConfig) Reset() {
	*x = MetadataPublisherConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataPublisherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPublisherConfig) ProtoMessage() {}

func (x *MetadataPublisherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPublisherConfig.ProtoReflect.Descriptor instead.
func (*MetadataPublisherConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{14}
}

func (x *MetadataPublisherConfig) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *MetadataPublisherConfig) GetMetadataUrl() string {
	if x != nil {
		return x.MetadataUrl
	}
	return ""
}

func (x *MetadataPublisherConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MetadataPublisherConfig) GetRequestTimeoutSeconds() int32 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

type WebhookConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	BaseUrl        string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *WebhookConfiguration) Reset() {
	*x = WebhookConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfiguration) ProtoMessage() {}

func (x *WebhookConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfiguration.ProtoReflect.Descriptor instead.
func (*WebhookConfiguration) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{15}
}

func (x *WebhookConfiguration) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *WebhookConfiguration) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *WebhookConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WebhookConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type TenantConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	TenantId       string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	TenantAlias    string `protobuf:"bytes,3,opt,name=tenant_alias,json=tenantAlias,proto3" json:"tenant_alias,omitempty"`
}

func (x *TenantConfiguration) Reset() {
	*x = TenantConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantConfiguration) ProtoMessage() {}

func (x *TenantConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantConfiguration.ProtoReflect.Descriptor instead.
func (*TenantConfiguration) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{16}
}

func (x *TenantConfiguration) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *TenantConfiguration) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TenantConfiguration) GetTenantAlias() string {
	if x != nil {
		return x.TenantAlias
	}
	return ""
}

// commands
type ConfiguredDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// Types that are assignable to Deployment:
	//	*ConfiguredDeployment_M3Configuration
	//	*ConfiguredDeployment_InforDocumentManagementConfiguration
	Deployment              isConfiguredDeployment_Deployment `protobuf_oneof:"deployment"`
	GlobalCronExportTrigger string                            `protobuf:"bytes,4,opt,name=global_cron_export_trigger,json=globalCronExportTrigger,proto3" json:"global_cron_export_trigger,omitempty"`
}

func (x *ConfiguredDeployment) Reset() {
	*x = ConfiguredDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfiguredDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfiguredDeployment) ProtoMessage() {}

func (x *ConfiguredDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfiguredDeployment.ProtoReflect.Descriptor instead.
func (*ConfiguredDeployment) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{17}
}

func (x *ConfiguredDeployment) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (m *ConfiguredDeployment) GetDeployment() isConfiguredDeployment_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (x *ConfiguredDeployment) GetM3Configuration() *M3Configuration {
	if x, ok := x.GetDeployment().(*ConfiguredDeployment_M3Configuration); ok {
		return x.M3Configuration
	}
	return nil
}

func (x *ConfiguredDeployment) GetInforDocumentManagementConfiguration() *InforDocumentManagementConfiguration {
	if x, ok := x.GetDeployment().(*ConfiguredDeployment_InforDocumentManagementConfiguration); ok {
		return x.InforDocumentManagementConfiguration
	}
	return nil
}

func (x *ConfiguredDeployment) GetGlobalCronExportTrigger() string {
	if x != nil {
		return x.GlobalCronExportTrigger
	}
	return ""
}

type isConfiguredDeployment_Deployment interface {
	isConfiguredDeployment_Deployment()
}

type ConfiguredDeployment_M3Configuration struct {
	M3Configuration *M3Configuration `protobuf:"bytes,2,opt,name=m3_configuration,json=m3Configuration,proto3,oneof"`
}

type ConfiguredDeployment_InforDocumentManagementConfiguration struct {
	InforDocumentManagementConfiguration *InforDocumentManagementConfiguration `protobuf:"bytes,3,opt,name=infor_document_management_configuration,json=inforDocumentManagementConfiguration,proto3,oneof"`
}

func (*ConfiguredDeployment_M3Configuration) isConfiguredDeployment_Deployment() {}

func (*ConfiguredDeployment_InforDocumentManagementConfiguration) isConfiguredDeployment_Deployment() {
}

type ConfiguredWebhookDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName        string            `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	KafkaServiceUri       string            `protobuf:"bytes,2,opt,name=kafka_service_uri,json=kafkaServiceUri,proto3" json:"kafka_service_uri,omitempty"`
	KafkaOutputTopic      string            `protobuf:"bytes,3,opt,name=kafka_output_topic,json=kafkaOutputTopic,proto3" json:"kafka_output_topic,omitempty"`
	ListenOn              string            `protobuf:"bytes,4,opt,name=listen_on,json=listenOn,proto3" json:"listen_on,omitempty"`
	WebhookUriPrefix      string            `protobuf:"bytes,5,opt,name=webhook_uri_prefix,json=webhookUriPrefix,proto3" json:"webhook_uri_prefix,omitempty"`
	WebhookRepo           string            `protobuf:"bytes,6,opt,name=webhook_repo,json=webhookRepo,proto3" json:"webhook_repo,omitempty"`
	ApplicationId         string            `protobuf:"bytes,7,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	M3ConnectorSourceName string            `protobuf:"bytes,8,opt,name=m3_connector_source_name,json=m3ConnectorSourceName,proto3" json:"m3_connector_source_name,omitempty"`
	KafkaClientId         string            `protobuf:"bytes,9,opt,name=kafka_client_id,json=kafkaClientId,proto3" json:"kafka_client_id,omitempty"`
	Endpoints             []*EndpointConfig `protobuf:"bytes,10,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *ConfiguredWebhookDeployment) Reset() {
	*x = ConfiguredWebhookDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfiguredWebhookDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfiguredWebhookDeployment) ProtoMessage() {}

func (x *ConfiguredWebhookDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfiguredWebhookDeployment.ProtoReflect.Descriptor instead.
func (*ConfiguredWebhookDeployment) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{18}
}

func (x *ConfiguredWebhookDeployment) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetKafkaServiceUri() string {
	if x != nil {
		return x.KafkaServiceUri
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetKafkaOutputTopic() string {
	if x != nil {
		return x.KafkaOutputTopic
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetListenOn() string {
	if x != nil {
		return x.ListenOn
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetWebhookUriPrefix() string {
	if x != nil {
		return x.WebhookUriPrefix
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetWebhookRepo() string {
	if x != nil {
		return x.WebhookRepo
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetM3ConnectorSourceName() string {
	if x != nil {
		return x.M3ConnectorSourceName
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetKafkaClientId() string {
	if x != nil {
		return x.KafkaClientId
	}
	return ""
}

func (x *ConfiguredWebhookDeployment) GetEndpoints() []*EndpointConfig {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type EndpointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	UriSuffix     string `protobuf:"bytes,2,opt,name=uri_suffix,json=uriSuffix,proto3" json:"uri_suffix,omitempty"`
	Authorization string `protobuf:"bytes,3,opt,name=authorization,proto3" json:"authorization,omitempty"`
}

func (x *EndpointConfig) Reset() {
	*x = EndpointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConfig) ProtoMessage() {}

func (x *EndpointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConfig.ProtoReflect.Descriptor instead.
func (*EndpointConfig) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{19}
}

func (x *EndpointConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *EndpointConfig) GetUriSuffix() string {
	if x != nil {
		return x.UriSuffix
	}
	return ""
}

func (x *EndpointConfig) GetAuthorization() string {
	if x != nil {
		return x.Authorization
	}
	return ""
}

type ConfigureMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName string         `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Tables         []*TableConfig `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ConfigureMappings) Reset() {
	*x = ConfigureMappings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_M3_Configuration_Configuration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureMappings) ProtoMessage() {}

func (x *ConfigureMappings) ProtoReflect() protoreflect.Message {
	mi := &file_M3_Configuration_Configuration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureMappings.ProtoReflect.Descriptor instead.
func (*ConfigureMappings) Descriptor() ([]byte, []int) {
	return file_M3_Configuration_Configuration_proto_rawDescGZIP(), []int{20}
}

func (x *ConfigureMappings) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *ConfigureMappings) GetTables() []*TableConfig {
	if x != nil {
		return x.Tables
	}
	return nil
}

var File_M3_Configuration_Configuration_proto protoreflect.FileDescriptor

var file_M3_Configuration_Configuration_proto_rawDesc = []byte{
	0x0a, 0x24, 0x4d, 0x33, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xec, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x11,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x10, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6a, 0x71, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6a, 0x71, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x64, 0x6f, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x25, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x61, 0x67, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x55, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x24, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x14, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x02, 0x0a, 0x0f, 0x4d, 0x33, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x69, 0x0a,
	0x14, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x61,
	0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d,
	0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x45, 0x0a, 0x16, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7e, 0x0a, 0x12, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x06, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7e, 0x0a, 0x13, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x8a, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x6d, 0x33, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x27, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x24, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x4f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75,
	0x72, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x69, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d,
	0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x0e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72, 0x69, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x33,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2a, 0x21, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x01, 0x2a, 0x2f,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x2a,
	0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a,
	0x02, 0x45, 0x71, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x74, 0x65, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x74, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x74, 0x65, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x65, 0x10, 0x05, 0x42,
	0x60, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69,
	0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x33, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0xaa, 0x02, 0x29, 0x44, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_M3_Configuration_Configuration_proto_rawDescOnce sync.Once
	file_M3_Configuration_Configuration_proto_rawDescData = file_M3_Configuration_Configuration_proto_rawDesc
)

func file_M3_Configuration_Configuration_proto_rawDescGZIP() []byte {
	file_M3_Configuration_Configuration_proto_rawDescOnce.Do(func() {
		file_M3_Configuration_Configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_M3_Configuration_Configuration_proto_rawDescData)
	})
	return file_M3_Configuration_Configuration_proto_rawDescData
}

var file_M3_Configuration_Configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_M3_Configuration_Configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_M3_Configuration_Configuration_proto_goTypes = []interface{}{
	(PredicateType)(0),       // 0: dolittle.integrations.m3.config.PredicateType
	(DataType)(0),            // 1: dolittle.integrations.m3.config.DataType
	(Comparator)(0),          // 2: dolittle.integrations.m3.config.Comparator
	(*TableConfig)(nil),      // 3: dolittle.integrations.m3.config.TableConfig
	(*TableMapping)(nil),     // 4: dolittle.integrations.m3.config.TableMapping
	(*WebhookPredicate)(nil), // 5: dolittle.integrations.m3.config.WebhookPredicate
	(*ColumnMap)(nil),        // 6: dolittle.integrations.m3.config.ColumnMap
	(*Clause)(nil),           // 7: dolittle.integrations.m3.config.Clause
	(*InforDocumentManagementExporterConfig)(nil), // 8: dolittle.integrations.m3.config.InforDocumentManagementExporterConfig
	(*InforDocumentManagementConfiguration)(nil),  // 9: dolittle.integrations.m3.config.InforDocumentManagementConfiguration
	(*M3Configuration)(nil),                       // 10: dolittle.integrations.m3.config.M3Configuration
	(*OauthAuthentication)(nil),                   // 11: dolittle.integrations.m3.config.OauthAuthentication
	(*BasicAuthentication)(nil),                   // 12: dolittle.integrations.m3.config.BasicAuthentication
	(*BlobStorageConfig)(nil),                     // 13: dolittle.integrations.m3.config.BlobStorageConfig
	(*AzureBlobStorageConfig)(nil),                // 14: dolittle.integrations.m3.config.AzureBlobStorageConfig
	(*KafkaConfiguration)(nil),                    // 15: dolittle.integrations.m3.config.KafkaConfiguration
	(*Topics)(nil),                                // 16: dolittle.integrations.m3.config.Topics
	(*MetadataPublisherConfig)(nil),               // 17: dolittle.integrations.m3.config.MetadataPublisherConfig
	(*WebhookConfiguration)(nil),                  // 18: dolittle.integrations.m3.config.WebhookConfiguration
	(*TenantConfiguration)(nil),                   // 19: dolittle.integrations.m3.config.TenantConfiguration
	(*ConfiguredDeployment)(nil),                  // 20: dolittle.integrations.m3.config.ConfiguredDeployment
	(*ConfiguredWebhookDeployment)(nil),           // 21: dolittle.integrations.m3.config.ConfiguredWebhookDeployment
	(*EndpointConfig)(nil),                        // 22: dolittle.integrations.m3.config.EndpointConfig
	(*ConfigureMappings)(nil),                     // 23: dolittle.integrations.m3.config.ConfigureMappings
}
var file_M3_Configuration_Configuration_proto_depIdxs = []int32{
	4,  // 0: dolittle.integrations.m3.config.TableConfig.mappings:type_name -> dolittle.integrations.m3.config.TableMapping
	5,  // 1: dolittle.integrations.m3.config.TableMapping.webhook_predicate:type_name -> dolittle.integrations.m3.config.WebhookPredicate
	6,  // 2: dolittle.integrations.m3.config.TableMapping.mappings:type_name -> dolittle.integrations.m3.config.ColumnMap
	7,  // 3: dolittle.integrations.m3.config.WebhookPredicate.clauses:type_name -> dolittle.integrations.m3.config.Clause
	0,  // 4: dolittle.integrations.m3.config.WebhookPredicate.predicate_type:type_name -> dolittle.integrations.m3.config.PredicateType
	1,  // 5: dolittle.integrations.m3.config.ColumnMap.data_type:type_name -> dolittle.integrations.m3.config.DataType
	2,  // 6: dolittle.integrations.m3.config.Clause.comparator:type_name -> dolittle.integrations.m3.config.Comparator
	13, // 7: dolittle.integrations.m3.config.InforDocumentManagementExporterConfig.blob_storage:type_name -> dolittle.integrations.m3.config.BlobStorageConfig
	11, // 8: dolittle.integrations.m3.config.InforDocumentManagementConfiguration.ion_authentication:type_name -> dolittle.integrations.m3.config.OauthAuthentication
	12, // 9: dolittle.integrations.m3.config.InforDocumentManagementConfiguration.basic_authentication:type_name -> dolittle.integrations.m3.config.BasicAuthentication
	11, // 10: dolittle.integrations.m3.config.M3Configuration.oauth_authentication:type_name -> dolittle.integrations.m3.config.OauthAuthentication
	12, // 11: dolittle.integrations.m3.config.M3Configuration.basic_authentication:type_name -> dolittle.integrations.m3.config.BasicAuthentication
	14, // 12: dolittle.integrations.m3.config.BlobStorageConfig.azure_provider:type_name -> dolittle.integrations.m3.config.AzureBlobStorageConfig
	16, // 13: dolittle.integrations.m3.config.KafkaConfiguration.topics:type_name -> dolittle.integrations.m3.config.Topics
	10, // 14: dolittle.integrations.m3.config.ConfiguredDeployment.m3_configuration:type_name -> dolittle.integrations.m3.config.M3Configuration
	9,  // 15: dolittle.integrations.m3.config.ConfiguredDeployment.infor_document_management_configuration:type_name -> dolittle.integrations.m3.config.InforDocumentManagementConfiguration
	22, // 16: dolittle.integrations.m3.config.ConfiguredWebhookDeployment.endpoints:type_name -> dolittle.integrations.m3.config.EndpointConfig
	3,  // 17: dolittle.integrations.m3.config.ConfigureMappings.tables:type_name -> dolittle.integrations.m3.config.TableConfig
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_M3_Configuration_Configuration_proto_init() }
func file_M3_Configuration_Configuration_proto_init() {
	if File_M3_Configuration_Configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_M3_Configuration_Configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InforDocumentManagementExporterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InforDocumentManagementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M3Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureBlobStorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataPublisherConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfiguredDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfiguredWebhookDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_M3_Configuration_Configuration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureMappings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_M3_Configuration_Configuration_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Clause_StringValue)(nil),
		(*Clause_IntValue)(nil),
		(*Clause_DoubleValue)(nil),
	}
	file_M3_Configuration_Configuration_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*InforDocumentManagementConfiguration_IonAuthentication)(nil),
		(*InforDocumentManagementConfiguration_BasicAuthentication)(nil),
	}
	file_M3_Configuration_Configuration_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*M3Configuration_OauthAuthentication)(nil),
		(*M3Configuration_BasicAuthentication)(nil),
	}
	file_M3_Configuration_Configuration_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BlobStorageConfig_AzureProvider)(nil),
	}
	file_M3_Configuration_Configuration_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ConfiguredDeployment_M3Configuration)(nil),
		(*ConfiguredDeployment_InforDocumentManagementConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_M3_Configuration_Configuration_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_M3_Configuration_Configuration_proto_goTypes,
		DependencyIndexes: file_M3_Configuration_Configuration_proto_depIdxs,
		EnumInfos:         file_M3_Configuration_Configuration_proto_enumTypes,
		MessageInfos:      file_M3_Configuration_Configuration_proto_msgTypes,
	}.Build()
	File_M3_Configuration_Configuration_proto = out.File
	file_M3_Configuration_Configuration_proto_rawDesc = nil
	file_M3_Configuration_Configuration_proto_goTypes = nil
	file_M3_Configuration_Configuration_proto_depIdxs = nil
}
